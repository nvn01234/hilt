version: '3'

includes:

  # Computation
  airflow:
    taskfile: cmds.yml
    dir: ./computation/airflow
    vars:
      DEPENDENT_SERVICES: postgresql redis
  alluvial:
    taskfile: cmds.yml
    dir: ./computation/alluvial
    vars:
      EXTRAS_PROFILES: manager
  datahub:
    taskfile: cmds.yml
    dir: ./computation/datahub
    vars:
      DEPENDENT_SERVICES: elasticsearch kafka mysql neo4j
  debezium:
    taskfile: cmds.yml
    dir: ./computation/debezium
    vars:
      REPOSITORY: sondn1
      IMAGE_NAME: debezium
      IMAGE_VERSION: 2.1.3
      IMAGE_BUILD_CONTEXT: image
  mage-ai:
    taskfile: cmds.yml
    dir: ./computation/mage
  nifi:
    taskfile: cmds.yml
    dir: ./computation/nifi
    vars:
      DEPENDENT_SERVICES: zookeeper
  spark:
    taskfile: cmds.yml
    dir: ./computation/spark
  trino:
    taskfile: cmds.yml
    dir: ./computation/trino
    vars:
      REPOSITORY: sondn1
      IMAGE_NAME: trino
      IMAGE_VERSION: 408
      IMAGE_BUILD_CONTEXT: image

  # Data mining
  jupyter:
    taskfile: cmds.yml
    dir: ./data-mining/jupyter
  superset:
    taskfile: cmds.yml
    dir: ./data-mining/superset
    vars:
      DEPENDENT_SERVICES: postgresql redis

  # Databases
  citus:
    taskfile: cmds.yml
    dir: ./databases/citus
  clickhouse:
    taskfile: cmds.yml
    dir: ./databases/clickhouse
  elasticsearch:
    taskfile: cmds.yml
    dir: ./databases/elasticsearch
  mongo:
    taskfile: cmds.yml
    dir: ./databases/mongo
  mysql:
    taskfile: cmds.yml
    dir: ./databases/mysql
  neo4j:
    taskfile: cmds.yml
    dir: ./databases/neo4j
  opensearch:
    taskfile: cmds.yml
    dir: ./databases/opensearch
    vars:
      EXTRAS_PROFILES: dashboard
  postgresql:
    taskfile: cmds.yml
    dir: ./databases/postgresql
    # vars:
    #   EXTRAS_PROFILES: pgbouncer
  rabbitmq:
    taskfile: cmds.yml
    dir: ./databases/rabbitmq
  redis:
    taskfile: cmds.yml
    dir: ./databases/redis

  # Monitoring
  grafana:
    taskfile: cmds.yml
    dir: ./monitoring/grafana
    vars:
      DEPENDENT_SERVICES: postgresql
  on-call:
    taskfile: cmds.yml
    dir: ./monitoring/on-call
    vars:
      DEPENDENT_SERVICES: grafana mysql rabbitmq
  prometheus:
    taskfile: cmds.yml
    dir: ./monitoring/prometheus
  fluentbit:
    taskfile: cmds.yml
    dir: ./monitoring/fluentbit

  # Security
  keycloak:
    taskfile: cmds.yml
    dir: ./security/keycloak
    vars:
      DEPENDENT_SERVICES: postgresql
  vault:
    taskfile: cmds.yml
    dir: ./security/vault

  # Storage
  hadoop:
    taskfile: cmds.yml
    dir: ./storage/hadoop
    vars:
      REPOSITORY: sondn1
      IMAGE_NAME: hadoop
      IMAGE_VERSION: 3.3.5
      IMAGE_BUILD_CONTEXT: image
      # EXTRAS_PROFILES: mapreduce
  kafka:
    taskfile: cmds.yml
    dir: ./storage/kafka
    vars:
      EXTRAS_PROFILES: ui sr
  minio:
    taskfile: cmds.yml
    dir: ./storage/minio
  zookeeper:
    taskfile: cmds.yml
    dir: ./storage/zookeeper

  # Warehouse
  hive:
    taskfile: cmds.yml
    dir: ./warehouse/hive
    vars:
      REPOSITORY: sondn1
      IMAGE_NAME: hive
      IMAGE_VERSION: 3.1.3
      IMAGE_BUILD_CONTEXT: image
      DEPENDENT_SERVICES: postgresql
      EXTRAS_PROFILES: init

  # Other
  postgrest:
    taskfile: cmds.yml
    dir: ./other/postgrest
    vars:
      DEPENDENT_SERVICES: postgresql
  strapi:
    taskfile: cmds.yml
    dir: ./other/strapi
    vars:
      DEPENDENT_SERVICES: postgresql

tasks:

  create-local-network:
    env:
      DEFAULT_NETWORK: '{{.DEFAULT_NETWORK | default "local"}}'
    cmds:
    - docker network create $DEFAULT_NETWORK

  rm-containers:
    cmds:
    - docker rm --force $(docker ps -aq)

  rm-volumes:
    cmds:
    - docker volume rm $(docker volume ls -q)

  compose-down:
    cmds:
    - task: rm-containers
    - task: rm-volumes

  prune:
    cmds:
    - docker system prune -af

  services:
    preconditions:
      - sh: "[ '{{ .CLI_ARGS }}' == 'start' ] ||
             [ '{{ .CLI_ARGS }}' == 'stop' ]  ||
             [ '{{ .CLI_ARGS }}' == 'restart' ]"
        msg: "Unknown CLI_ARGS. Please input start, top, or restart."
    cmds:
      - echo "Starting services"
      # - task: airflow:{{ .CLI_ARGS }}
      # - task: alluvial:{{ .CLI_ARGS }}
      # - task: datahub:{{ .CLI_ARGS }}
      # - task: debezium:{{ .CLI_ARGS }}
      # - task: fluentbit:{{ .CLI_ARGS }}
      # - task: nifi:{{ .CLI_ARGS }}
      # - task: spark:{{ .CLI_ARGS }}
      # - task: trino:{{ .CLI_ARGS }}

      # - task: jupyter:{{ .CLI_ARGS }}
      # - task: superset:{{ .CLI_ARGS }}

      # - task: clickhouse:{{ .CLI_ARGS }}
      # - task: mongo:{{ .CLI_ARGS }}
      # - task: mysql:{{ .CLI_ARGS }}
      # - task: neo4j:{{ .CLI_ARGS }}
      # - task: postgresql:{{ .CLI_ARGS }}
      # - task: rabbitmq:{{ .CLI_ARGS }}
      # - task: redis:{{ .CLI_ARGS }}

      # - task: grafana:{{ .CLI_ARGS }}
      # - task: on-call:{{ .CLI_ARGS }}
      # - task: prometheus:{{ .CLI_ARGS }}

      # - task: keycloak:{{ .CLI_ARGS }}
      # - task: vault:{{ .CLI_ARGS }}

      # - task: elasticsearch:{{ .CLI_ARGS }}
      # - task: kafka:{{ .CLI_ARGS }}
      # - task: minio:{{ .CLI_ARGS }}
      # - task: opensearch:{{ .CLI_ARGS }}
      # - task: zookeeper:{{ .CLI_ARGS }}

      # - task: hive:{{ .CLI_ARGS }}

      # - task: postgrest:{{ .CLI_ARGS }}
      # - task: strapi:{{ .CLI_ARGS }}


